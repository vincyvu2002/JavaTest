/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mytest;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;

/**
 *
 * @author localadmin
 */
public class Game extends javax.swing.JFrame {
    private final Logger log = Logger.getLogger(getClass().getName());
    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        InputMap map = jPanel1.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_W, 0), "up");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_S, 0), "down");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0), "left");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_D, 0), "right");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_I, 0), "fireup");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_K, 0), "firedown");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_J, 0), "fireleft");
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_L, 0), "fireright");
        jPanel1.getActionMap().put("up", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).up();
                }
            }
        });
        jPanel1.getActionMap().put("down", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).down();
                }
            }
        });
        jPanel1.getActionMap().put("left", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).left();
                }
            }
        });
        jPanel1.getActionMap().put("right", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).right();
                }
            }
        });
        jPanel1.getActionMap().put("fireup", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).fire(Direction.UP);
                }
            }
        });
        jPanel1.getActionMap().put("firedown", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).fire(Direction.DOWN);
                }
            }
        });
        jPanel1.getActionMap().put("fireleft", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).fire(Direction.LEFT);
                }
            }
        });
        jPanel1.getActionMap().put("fireright", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jPanel1 instanceof GamePanel) {
                    ((GamePanel)jPanel1).fire(Direction.RIGHT);
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new GamePanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jButton1.setText("The Button is staring you in the eyes. Resist.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(this, "Resistance is futile");
    }//GEN-LAST:event_jButton1ActionPerformed

    static enum Direction {
        UP,
        DOWN,
        LEFT,
        RIGHT
    }
    
    class GamePanel extends JPanel {
        class Shooting implements Runnable {
            private final Thread work;
            private final Direction direction;
            private final Rectangle bounds;
            private int x;
            private int y;
            Shooting(Direction dir, double x, double y, Rectangle bounds) {
                direction = dir;
                work = new Thread(this);
                this.x = (int)x;
                this.y = (int)y;
                this.bounds = bounds;
            }
            
            private void start() {
                work.start();
            }
            
            @Override
            public void run() {
                try {
                    while(true) {
                        try {
                            switch(direction) {
                                case DOWN:
                                    y = y + 1;
                                    break;
                                case UP:
                                    y = y - 1;
                                    break;
                                case LEFT:
                                    x = x - 1;
                                    break;
                                case RIGHT:
                                    x = x + 1;
                                    break;
                            }
                            if((y < 0)||(y >= bounds.height)||(x >= bounds.width)||(x < 0)) {
                                stopBullet();
                                return;
                            } else {
                                drawBulletAt(x, y);
                            }
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
                            break;
                        }
                    }
                } finally {
                    log.info("Bullet terminated");
                }
            }
            
        }
        private final BufferedImage buddy;
        private double x;
        private double y;
        private int bulletX;
        private int bulletY;
        private boolean drawBullet;
        private Direction dir;
        private static final int speed = 2;
        public GamePanel() {
            BufferedImage tmp = null;
            try {
                tmp = ImageIO.read(getClass().getClassLoader().getResource("mytest/Buddy.png"));
            } catch (IOException ex) {
                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
            }
            buddy = tmp;
        }
        void fire(Direction bulletDir) {
            new Shooting(bulletDir, x, y, getBounds()).start();
        }
        void stopBullet() {
            drawBullet = false;
            repaint();
        }
        void drawBulletAt(int x, int y) {
            bulletX = x;
            bulletY = y;
            drawBullet = true;
            repaint();
        }
        
        void up() {
            dir = Direction.UP;
            y = y -speed;
            repaint();
        }
        
        void down() {
            dir = Direction.DOWN;
            y = y +speed;
            repaint();
        }
        
        void left() {
            dir = Direction.LEFT;
            x = x -speed;
            repaint();
        }
        
        void right() {
            dir = Direction.RIGHT;
            x = x +speed;
            repaint();
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Rectangle bounds = getBounds();
            Graphics local = g.create();
            try {
                if(local instanceof Graphics2D) {
                    Graphics2D g2d = (Graphics2D)local;
                    g2d.drawImage(buddy, new AffineTransform(1.0, 0.0, 0.0, 1.0, x, y), null);
                    
                    if(drawBullet) {
                        if((bulletY < 0)||(bulletY >= bounds.height)||(bulletX >= bounds.width)||(bulletX < 0)) {
                            drawBullet = false;
                        } else {
                            g2d.drawOval(bulletX, bulletY, 4, 4);
                        }
                    }
                }
            } finally {
                local.dispose();
            }
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
